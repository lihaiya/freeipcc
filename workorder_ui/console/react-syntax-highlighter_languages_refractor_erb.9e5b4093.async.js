"use strict";(self.webpackChunkant_design_pro=self.webpackChunkant_design_pro||[]).push([[2584,3047,369],{3275:function(c,l,p){var t=p(90303),n=p(21417);c.exports=e,e.displayName="erb",e.aliases=[];function e(r){r.register(t),r.register(n),function(a){a.languages.erb=a.languages.extend("ruby",{}),a.languages.insertBefore("erb","comment",{delimiter:{pattern:/^<%=?|%>$/,alias:"punctuation"}}),a.hooks.add("before-tokenize",function(o){var u=/<%=?(?:[^\r\n]|[\r\n](?!=begin)|[\r\n]=begin\s[\s\S]*?^=end)+?%>/gm;a.languages["markup-templating"].buildPlaceholders(o,"erb",u)}),a.hooks.add("after-tokenize",function(o){a.languages["markup-templating"].tokenizePlaceholders(o,"erb")})}(r)}},90303:function(c){c.exports=l,l.displayName="markupTemplating",l.aliases=[];function l(p){(function(t){function n(e,r){return"___"+e.toUpperCase()+r+"___"}Object.defineProperties(t.languages["markup-templating"]={},{buildPlaceholders:{value:function(e,r,a,o){if(e.language===r){var u=e.tokenStack=[];e.code=e.code.replace(a,function(s){if(typeof o=="function"&&!o(s))return s;for(var g=u.length,i;e.code.indexOf(i=n(r,g))!==-1;)++g;return u[g]=s,i}),e.grammar=t.languages.markup}}},tokenizePlaceholders:{value:function(e,r){if(e.language!==r||!e.tokenStack)return;e.grammar=t.languages[r];var a=0,o=Object.keys(e.tokenStack);function u(s){for(var g=0;g<s.length&&!(a>=o.length);g++){var i=s[g];if(typeof i=="string"||i.content&&typeof i.content=="string"){var y=o[a],h=e.tokenStack[y],f=typeof i=="string"?i:i.content,k=n(r,y),b=f.indexOf(k);if(b>-1){++a;var S=f.substring(0,b),m=new t.Token(r,t.tokenize(h,e.grammar),"language-"+r,h),w=f.substring(b+k.length),d=[];S&&d.push.apply(d,u([S])),d.push(m),w&&d.push.apply(d,u([w])),typeof i=="string"?s.splice.apply(s,[g,1].concat(d)):i.content=d}}else i.content&&u(i.content)}return s}u(e.tokens)}}})})(p)}},21417:function(c){c.exports=l,l.displayName="ruby",l.aliases=["rb"];function l(p){(function(t){t.languages.ruby=t.languages.extend("clike",{comment:[/#.*/,{pattern:/^=begin\s[\s\S]*?^=end/m,greedy:!0}],keyword:/\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/});var n={pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"tag"},rest:t.languages.ruby}};delete t.languages.ruby.function,t.languages.insertBefore("ruby","keyword",{regex:[{pattern:/%r([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/,greedy:!0,inside:{interpolation:n}},{pattern:/(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}],variable:/[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,lookbehind:!0},"method-definition":{pattern:/(\bdef\s+)[\w.]+/,lookbehind:!0,inside:{function:/\w+$/,rest:t.languages.ruby}}}),t.languages.insertBefore("ruby","number",{builtin:/\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,constant:/\b[A-Z]\w*(?:[?!]|\b)/}),t.languages.ruby.string=[{pattern:/%[qQiIwWxs]?([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/,greedy:!0,inside:{interpolation:n}},{pattern:/%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/,greedy:!0,inside:{interpolation:n}},{pattern:/("|')(?:#\{[^}]+\}|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{interpolation:n}}],t.languages.rb=t.languages.ruby})(p)}}}]);
